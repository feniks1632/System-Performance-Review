# app/main.py
from fastapi import FastAPI
from app.core.config import settings
from app.database.session import engine
from app.models.database import Base
import logging
from contextlib import asynccontextmanager

logging.basicConfig(
    level=logging.DEBUG,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë, –≤–∫–ª—é—á–∞—è debug
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("Database tables created successfully")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
    yield
    # Shutdown


app = FastAPI(
    title=settings.PROJECT_NAME,
    version="1.0.0",
    description="""
    Performance Review System API
    
    ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    * üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** - JWT —Ç–æ–∫–µ–Ω—ã
    * üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    * üìä **Performance Review** - —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, –æ—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π, –æ—Ü–µ–Ω–∫–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
    * üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ü–µ–ª—è–º –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    * üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - in-app –∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    * üë• **–†–æ–ª–∏** - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
    
    ## –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bearer —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization:
    `Authorization: Bearer {jwt_token}`
    """,
    contact={
        "name": "Development Team",
        "email": "dev@company.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from app.api.endpoints import auth, goals, reviews, analytics, notifications, users, goal_steps, question_templates

app.include_router(auth.router, prefix="/api/v1/auth", tags=["authentication"])
app.include_router(goals.router, prefix="/api/v1/goals", tags=["goals"])
app.include_router(reviews.router, prefix="/api/v1/reviews", tags=["reviews"])
app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["analytics"])
app.include_router(
    notifications.router, prefix="/api/v1/notifications", tags=["notifications"]
)
app.include_router(users.router, prefix="/api/v1/users", tags=["users"])
app.include_router(goal_steps.router, prefix="/api/v1", tags=["goal-steps"])
app.include_router(question_templates.router, prefix="/api/v1/question-templates", tags=["question-templates"])


@app.get("/")
async def root():
    return {"message": "Performance Review System API"}
