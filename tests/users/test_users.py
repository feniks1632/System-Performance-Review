from app.core.logger import logger


def test_get_current_user(client, test_user_data):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
    client.post("/api/v1/auth/register", json=test_user_data)

    login_data = {
        "email": test_user_data["email"],
        "password": test_user_data["password"],
    }
    login_response = client.post("/api/v1/auth/login", json=login_data)
    token = login_response.json()["access_token"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    headers = {"Authorization": f"Bearer {token}"}
    response = client.get("/api/v1/auth/me", headers=headers)

    assert response.status_code == 200
    data = response.json()
    assert data["email"] == test_user_data["email"]
    assert data["full_name"] == test_user_data["full_name"]


def test_protected_endpoint_without_token(client):
    """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
    response = client.get("/api/v1/auth/me")
    assert response.status_code == 401
    assert "Not authenticated" in response.json()["detail"]


def test_protected_endpoint_invalid_token(client):
    """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    headers = {"Authorization": "Bearer invalid_token"}
    response = client.get("/api/v1/auth/me", headers=headers)
    assert response.status_code == 401


def test_cross_role_access_integration(
    client,
    test_goal_with_employee,
    employee_auth_headers,
    manager_auth_headers,
):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    logger.info("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–ê–í –î–û–°–¢–£–ü–ê")

    goal_id = test_goal_with_employee.id

    # 1. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –°–í–û–ò —Ü–µ–ª–∏
    employee_goals_response = client.get(
        f"/api/v1/goals/employee/{test_goal_with_employee.employee_id}",
        headers=employee_auth_headers,
    )
    assert employee_goals_response.status_code == 200

    # 2. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏ –ü–û–î–ß–ò–ù–ï–ù–ù–û–ì–û
    manager_summary_response = client.get(
        f"/api/v1/analytics/employee/{test_goal_with_employee.employee_id}/summary",
        headers=manager_auth_headers,
    )
    assert manager_summary_response.status_code == 200

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
    employee_goals = employee_goals_response.json()
    manager_summary = manager_summary_response.json()

    assert len(employee_goals) == manager_summary["total_goals"]

    logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_data_consistency_integration(
    client,
    test_goal_with_employee,
    employee_auth_headers,
    manager_auth_headers,
):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
    logger.info("–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")

    goal_id = test_goal_with_employee.id

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –∏–∑ goals –º–æ–¥—É–ª—è
    goal_response = client.get(
        f"/api/v1/goals/{goal_id}", headers=employee_auth_headers
    )
    goal_data = goal_response.json()

    # 2. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —ç—Ç–æ–π –∂–µ —Ü–µ–ª–∏ –∏–∑ analytics –º–æ–¥—É–ª—è
    analytics_response = client.get(
        f"/api/v1/analytics/goal/{goal_id}", headers=manager_auth_headers
    )
    analytics_data = analytics_response.json()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
    assert goal_data["id"] == analytics_data["goal_id"]
    assert goal_data["title"] == test_goal_with_employee.title

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    summary_response = client.get(
        f"/api/v1/analytics/employee/{test_goal_with_employee.employee_id}/summary",
        headers=manager_auth_headers,
    )
    summary_data = summary_response.json()

    assert summary_data["employee_id"] == test_goal_with_employee.employee_id
    assert summary_data["total_goals"] >= 1  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å

    logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
