import pytest
from app.core.logger import logger


def test_full_system_workflow(
    client,
    test_employee_user,
    test_manager_user_complete,
    test_question_templates,
    test_goal_with_employee,
    employee_auth_headers,
    manager_auth_headers,
):
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏—Å—Ç–µ–º—ã Performance Review"""

    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –° –§–ò–ö–°–¢–£–†–ê–ú–ò\n")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
    logger.info("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    logger.info(
        "- –°–æ—Ç—Ä—É–¥–Ω–∏–∫: %s (%s)", test_employee_user.full_name, test_employee_user.email
    )
    logger.info(
        "- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: %s (%s)",
        test_manager_user_complete.full_name,
        test_manager_user_complete.email,
    )
    logger.info("- –í–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: %d", len(test_question_templates))
    logger.info("- –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: %s", test_goal_with_employee.title)

    # 2. –†–∞–±–æ—Ç–∞ —Å —Ü–µ–ª—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    logger.info("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏")

    goals_response = client.get(
        f"/api/v1/goals/employee/{test_employee_user.id}", headers=employee_auth_headers
    )
    assert (
        goals_response.status_code == 200
    ), f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π: {goals_response.text}"
    goals = goals_response.json()
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–ª–µ–π: %d", len(goals))

    goal_id = test_goal_with_employee.id
    logger.debug("ID —Ç–µ—Å—Ç–æ–≤–æ–π —Ü–µ–ª–∏: %s", goal_id)

    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
    logger.info("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤")

    questions_response = client.get(
        "/api/v1/question-templates/?question_type=self", headers=employee_auth_headers
    )
    assert (
        questions_response.status_code == 200
    ), f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_response.text}"
    questions = questions_response.json()
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏: %d", len(questions))

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
    logger.info("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏")

    if questions:
        question_id = questions[0]["id"]

        self_review_data = {
            "goal_id": goal_id,
            "review_type": "self",
            "answers": [
                {
                    "question_id": question_id,
                    "answer": "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –≤–µ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –î–æ—Å—Ç–∏–≥ –≤—Å–µ—Ö KPI –ø–æ –ø—Ä–æ–µ–∫—Ç—É.",
                    "score": 4.5,
                }
            ],
        }

        self_review_response = client.post(
            "/api/v1/reviews/", json=self_review_data, headers=employee_auth_headers
        )
        assert (
            self_review_response.status_code == 200
        ), f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏: {self_review_response.text}"
        self_review = self_review_response.json()
        assert self_review["calculated_score"] > 0, "–ë–∞–ª–ª –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω"
        logger.info("–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –±–∞–ª–ª: %.2f", self_review["calculated_score"])

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    logger.info("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")

    manager_questions_response = client.get(
        "/api/v1/question-templates/?question_type=manager",
        headers=manager_auth_headers,
    )
    assert (
        manager_questions_response.status_code == 200
    ), f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {manager_questions_response.text}"
    manager_questions = manager_questions_response.json()
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: %d", len(manager_questions))

    if manager_questions:
        question_id = manager_questions[0]["id"]

        manager_review_data = {
            "goal_id": goal_id,
            "review_type": "manager",
            "answers": [
                {
                    "question_id": question_id,
                    "answer": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–µ–≤—ã—Å–∏–ª –ø–ª–∞–Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ 15%.",
                    "score": 9.0,
                }
            ],
        }

        manager_review_response = client.post(
            "/api/v1/reviews/", json=manager_review_data, headers=manager_auth_headers
        )
        assert (
            manager_review_response.status_code == 200
        ), f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {manager_review_response.text}"
        manager_review = manager_review_response.json()
        logger.info(
            "–û—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞, –±–∞–ª–ª: %.2f",
            manager_review["calculated_score"],
        )

    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    logger.info("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

    analytics_response = client.get(
        f"/api/v1/analytics/goal/{goal_id}", headers=manager_auth_headers
    )
    assert (
        analytics_response.status_code == 200
    ), f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analytics_response.text}"
    analytics = analytics_response.json()

    logger.info("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
    logger.info("- –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞: %.2f", analytics["scores"]["self_score"])
    logger.info("- –û—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: %.2f", analytics["scores"]["manager_score"])
    logger.info("- –û–±—â–∏–π –±–∞–ª–ª: %.2f", analytics["scores"]["total_score"])
    logger.info("- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %d", len(analytics["recommendations"]))

    if analytics["recommendations"]:
        logger.info("–¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        for i, rec in enumerate(analytics["recommendations"][:3], 1):
            logger.info("     %d. %s", i, rec)

    # 7. –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    logger.info("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")

    summary_response = client.get(
        f"/api/v1/analytics/employee/{test_employee_user.id}/summary",
        headers=manager_auth_headers,
    )
    assert (
        summary_response.status_code == 200
    ), f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {summary_response.text}"
    summary = summary_response.json()

    logger.info("–°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
    logger.info("- –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: %d", summary["total_goals"])
    logger.info("- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: %d", summary["completed_goals"])
    logger.info("- –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %.2f", summary["average_score"])
    logger.info("- –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %s", summary["overall_rating"])

    # 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("–í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!\n")
    logger.info("–°–ò–°–¢–ï–ú–ê PERFORMANCE REVIEW –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    logger.info("–§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info("- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:")
    logger.info("- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:")
    logger.info("- –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–µ—Å–∞–º–∏:")
    logger.info("- –û—Ü–µ–Ω–∫–∏ (—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å):")
    logger.info("- –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ —Å –≤–µ—Å–∞–º–∏:")
    logger.info("- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    logger.info("- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å:")
